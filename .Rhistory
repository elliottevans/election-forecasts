) as temp1
")
polls_altered[polls_altered$election_year==2016,'actual_binary_dem']<-''
#########################################################################################################################################
# CREATE WEIGHTED POLLING AVERAGES
#########################################################################################################################################
#########################################################################################################################################
# NEAREST NEIGHBOR LEARNING
#########################################################################################################################################
k_run<-100
temp<-polls_altered
#standardize metrics for nearest neighbor algorithm
temp$days_till_election<-temp$days_till_election-mean(temp$days_till_election)
temp$days_till_election<-temp$days_till_election/sd(temp$days_till_election)
temp$weighted_avg<-temp$weighted_avg-mean(temp$weighted_avg)
temp$weighted_avg<-temp$weighted_avg/sd(temp$weighted_avg)
temp$hist_dem_prob<-temp$hist_dem_prob-mean(temp$hist_dem_prob)
temp$hist_dem_prob<-temp$hist_dem_prob/sd(temp$hist_dem_prob)
##########################
#Take equal parts from each year for nearest neighbor alg
#Creates indices_2000,indices_2000,indices_2008,indices_2012
#Creates train_2000,train_2004,train_2008,train_2012
##########################
years<-c(2000,2004,2008,2012)
for(i in 1:length(years)){
train_year<-paste0("train","_",years[i])
assign(train_year,temp[temp$election_year==years[i],])
train_temp<-temp[temp$election_year==years[i],]
k_run_update<-floor((nrow(train_temp)/nrow(temp[temp$election_year!=2016,]))*k_run)
nearest<-get.knnx(
train_temp[,c(
"days_till_election"
,"weighted_avg"
,"hist_dem_prob"
)]
,temp[temp$election_year==2016,c(
"days_till_election"
,"weighted_avg"
,"hist_dem_prob"
)]
,k=k_run_update)
indices_year<-paste0("indices","_",years[i])
assign(indices_year,nearest$nn.index)
}
##########################
#Take equal parts from each year for nearest neighbor alg
##########################
polls_altered_2016<-polls_altered[polls_altered$election_year==2016,]
means<-c()
sds<-c()
probs<-c()
for(i in 1:nrow(polls_altered_2016)){
margins<-c(train_2000[indices_2000[i,],]$actual_dem_margin
,train_2004[indices_2004[i,],]$actual_dem_margin
,train_2008[indices_2008[i,],]$actual_dem_margin
,train_2012[indices_2012[i,],]$actual_dem_margin)
means<-append(means,mean(margins))
sds<-append(sds,sd(margins))
probability<-pnorm(q=0,mean=mean(margins),sd=sd(margins),lower.tail = FALSE)
probs<-append(probs,probability)
}
polls_altered_2016$probs<-probs
polls_altered_2016$mean<-means
polls_altered_2016$sd<-sds
#########################################################################################################################################
# NEAREST NEIGHBOR LEARNING
#########################################################################################################################################
polls_altered_final<-data.frame(cbind(polls_altered,prob_weighted_dem=NA,prob_weighted_rep=NA))
polls_altered_final<-melt(polls_altered_final,id=c('id','election_year','state','date','days_till_election','dem_plus_minus',
'weighted_avg','hist_dem_prob','actual','actual_dem_margin','actual_binary_dem'))
names(polls_altered_final)[ncol(polls_altered_final)-1]<-'prediction'
polls_altered_final<-sql("
select
paf.*
,mean
,sd
,case when prediction='prob_weighted_rep' then 1-probs
when prediction='prob_weighted_dem' then probs
end as nearest_neighbor_value
from polls_altered_final paf
left join polls_altered_2016 pa on pa.id=paf.id
")
polls_altered_final<-polls_altered_final[,!(colnames(polls_altered_final) %in% c('value'))]
####################################
# Actually create the models
####################################
####################################
# Set indicators for the state's most current prediction date
####################################
#Make indicators for the last prediction for each state-year
temp<-sql("
select
election_year
,State
,min(days_till_election) as final_poll_days_till_election
from polls_altered_final
group by 1,2
")
polls_altered_final<-sql("
select
paf.*
,case when final_poll_days_till_election=days_till_election then 1 else 0 end as final_prediction_ind
from polls_altered_final paf
inner join temp t on paf.election_year=t.election_year and paf.State=t.State
")
write.csv(polls_altered_final,'forecasts\\polls_altered_final.csv',row.names = FALSE)
####################################
# Set indicators for the state's most current prediction date
####################################
polls_altered_2016[polls_altered_2016$state=='PA',]
#########################################################################################################################################
# ELECTION SIMULATION
#########################################################################################################################################
#HERE TO EDIT
state_odds<-sqldf("
select
msr.state
,abb
,electoral_votes
,ifnull(dem_prob,msr.hist_dem_prob) as dem_prob
,mean
,sd
from master_state_ref msr
left join
(
select
state
,hist_dem_prob
,nearest_neighbor_value as dem_prob
,mean
,sd
from polls_altered_final paf
where final_prediction_ind=1
and election_year=2016
and prediction='prob_weighted_dem'
) as t1
on msr.abb=t1.state
")
state_odds<-sql("
select
so.state
,so.abb
,so.electoral_votes
,dem_prob
,ifnull(mean,(`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4) as mean
,ifnull(sd,sqrt(power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2000_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2004_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2008_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2012_dem_margin`),2))) as sd
from state_odds so
inner join master_state_ref msr on so.state=msr.state
")
state_odds
n<-1000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
if(i %% 1000 == 0){print(paste('CURRENTLY ON ELECTION SIMULATION:',i))}
state_odds_rand<-state_odds[sample(nrow(state_odds)),]
electoral_votes<-0
margins<-c()
for(j in 1:nrow(state_odds_rand)){
if(j==1){
margin<-rnorm(1,state_odds_rand$mean[j],state_odds_rand$sd[j])
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
else {
corr<-t(master_state_ref)
colnames(corr)<-corr['abb',]
corr<-data.frame(corr[12:15,],stringsAsFactors = FALSE)
corr<-sapply(corr,as.numeric)
corr<-cor(corr[,state_odds_rand$abb[(j-1):j]])
correlation<-corr[1,2]
updated_mean<-state_odds_rand$mean[j] +
correlation*(state_odds_rand$sd[(j-1)]/state_odds_rand$sd[j])*
(margins[(j-1)]-state_odds_rand$mean[(j-1)])
updated_sd<-sqrt(state_odds_rand$sd[j]^2*(1-correlation^2))
margin<-rnorm(1,updated_mean,updated_sd)
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
if(win_or_lose==1){
electoral_votes<-electoral_votes+state_odds_rand[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
dem_prob
polls_2016
dim(polls_2016)
polls_2061
head(polls_2016)
bla<-polls[polls$State=='PA',]
bla<-bla[bla$election_year==2016,]
bl
bla
polls[polls$id==24871,]
polls[polls$id==24871,'value']
polls[polls$id==24871,'value']<-c(40,34)
polls[polls$id==24871,'value']
polls[polls$id==24871,]
setwd("~/election_forecasts")
source("prep.R")
#Functions created: multiplot, sql
#Data sets created:
#   1. master_state_ref
#   2. polls_2000
#   3. polls_2004
#   4. polls_2008
#   5. polls_2012
#   6. polls_2016
#   7. polls
setwd("~/election_forecasts")
source("prep.R")
setwd("~/election_forecasts")
source("prep.R")
#Functions created: multiplot, sql
#Data sets created:
setwd("~/election_forecasts")
source("prep.R")
#Functions created: multiplot, sql
#Data sets created:
#   1. master_state_ref
#   2. polls_2000
#   3. polls_2004
#   4. polls_2008
#   5. polls_2012
#   6. polls_2016
#   7. polls
#########################################################################################################################################
# CREATE WEIGHTED POLLING AVERAGES
#########################################################################################################################################
temp1<-sql("
Select
id
,election_year
,state as state
,date
,days_till_election
,sum(case when party='D' then value else 0 end) -
sum(case when party='R' then value else 0 end) as dem_plus_minus
from polls
group by 1,2,3
")
names(temp1)<-c('id','election_year','state','date','days_till_election','dem_plus_minus')
#Create running averages of polling margins
years<-c(2000,2004,2008,2012,2016)
polls_altered<-data.frame()
#1:length(years)
for(l in 1:length(years)){
year<-years[l]
temp2<-temp1[temp1$election_year==year,]
states<-unique(temp2$state)
#1:length(states)
for(m in 1:length(states)){
state<-states[m]
temp3<-temp2[temp2$state==state,]
temp4<-temp3[order(-temp3$days_till_election),]
weighted_avg<-c()
for(p in 1:nrow(temp4)){
#Note that we give more weight to polls closer to the election day
temp5<-temp4[1:p,]
n<-nrow(temp5)
weights<-c()
weight_sum<-0
for(i in 1:n){
sum<-1
j<-1
while(j >=1 && j<=(n-1)){
sum_temp<-0
k<-i
while(k>=i && k<=j){
sum_temp<-sum_temp+temp5$days_till_election[k]/temp5$days_till_election[k+1]
k<-k+1
}
if(i>j){sum<-sum+0}else{sum<-sum+expChoose(sum_temp,2)}
j<-j+1
}
sum<-(1-weight_sum)*(sum^(-1))
weight_sum<-weight_sum+sum
weights<-append(weights,sum)
}
weighted_avg<-append(weighted_avg,sum(temp5$dem_plus_minus*weights))
}
temp5<-data.frame(cbind(temp5,weighted_avg))
polls_altered<-data.frame(rbind(polls_altered,temp5))
}
}
polls_altered<-sql("
select
temp1.*
,case when actual='D' then 1
when actual='R' then 0
when election_year=2016 then '' end as actual_binary_dem
from
(
select
pa.*
,hist_dem_prob
,case when pa.election_year=2000 then msr.`2000`
when pa.election_year=2004 then msr.`2004`
when pa.election_year=2008 then msr.`2008`
when pa.election_year=2012 then msr.`2012`
when pa.election_year=2016 then '' end as actual
,case when pa.election_year=2000 then msr.`2000_dem_margin`
when pa.election_year=2004 then msr.`2004_dem_margin`
when pa.election_year=2008 then msr.`2008_dem_margin`
when pa.election_year=2012 then msr.`2012_dem_margin`
when pa.election_year=2016 then '' end as actual_dem_margin
from polls_altered pa
inner join master_state_ref msr on msr.abb=pa.state
) as temp1
")
polls_altered[polls_altered$election_year==2016,'actual_binary_dem']<-''
#########################################################################################################################################
# CREATE WEIGHTED POLLING AVERAGES
#########################################################################################################################################
#########################################################################################################################################
# NEAREST NEIGHBOR LEARNING
#########################################################################################################################################
k_run<-100
temp<-polls_altered
#standardize metrics for nearest neighbor algorithm
temp$days_till_election<-temp$days_till_election-mean(temp$days_till_election)
temp$days_till_election<-temp$days_till_election/sd(temp$days_till_election)
temp$weighted_avg<-temp$weighted_avg-mean(temp$weighted_avg)
temp$weighted_avg<-temp$weighted_avg/sd(temp$weighted_avg)
temp$hist_dem_prob<-temp$hist_dem_prob-mean(temp$hist_dem_prob)
temp$hist_dem_prob<-temp$hist_dem_prob/sd(temp$hist_dem_prob)
##########################
#Take equal parts from each year for nearest neighbor alg
#Creates indices_2000,indices_2000,indices_2008,indices_2012
#Creates train_2000,train_2004,train_2008,train_2012
##########################
years<-c(2000,2004,2008,2012)
for(i in 1:length(years)){
train_year<-paste0("train","_",years[i])
assign(train_year,temp[temp$election_year==years[i],])
train_temp<-temp[temp$election_year==years[i],]
k_run_update<-floor((nrow(train_temp)/nrow(temp[temp$election_year!=2016,]))*k_run)
nearest<-get.knnx(
train_temp[,c(
"days_till_election"
,"weighted_avg"
,"hist_dem_prob"
)]
,temp[temp$election_year==2016,c(
"days_till_election"
,"weighted_avg"
,"hist_dem_prob"
)]
,k=k_run_update)
indices_year<-paste0("indices","_",years[i])
assign(indices_year,nearest$nn.index)
}
##########################
#Take equal parts from each year for nearest neighbor alg
##########################
polls_altered_2016<-polls_altered[polls_altered$election_year==2016,]
means<-c()
sds<-c()
probs<-c()
for(i in 1:nrow(polls_altered_2016)){
margins<-c(train_2000[indices_2000[i,],]$actual_dem_margin
,train_2004[indices_2004[i,],]$actual_dem_margin
,train_2008[indices_2008[i,],]$actual_dem_margin
,train_2012[indices_2012[i,],]$actual_dem_margin)
means<-append(means,mean(margins))
sds<-append(sds,sd(margins))
probability<-pnorm(q=0,mean=mean(margins),sd=sd(margins),lower.tail = FALSE)
probs<-append(probs,probability)
}
polls_altered_2016$probs<-probs
polls_altered_2016$mean<-means
polls_altered_2016$sd<-sds
#########################################################################################################################################
# NEAREST NEIGHBOR LEARNING
#########################################################################################################################################
polls_altered_final<-data.frame(cbind(polls_altered,prob_weighted_dem=NA,prob_weighted_rep=NA))
polls_altered_final<-melt(polls_altered_final,id=c('id','election_year','state','date','days_till_election','dem_plus_minus',
'weighted_avg','hist_dem_prob','actual','actual_dem_margin','actual_binary_dem'))
names(polls_altered_final)[ncol(polls_altered_final)-1]<-'prediction'
polls_altered_final<-sql("
select
paf.*
,mean
,sd
,case when prediction='prob_weighted_rep' then 1-probs
when prediction='prob_weighted_dem' then probs
end as nearest_neighbor_value
from polls_altered_final paf
left join polls_altered_2016 pa on pa.id=paf.id
")
polls_altered_final<-polls_altered_final[,!(colnames(polls_altered_final) %in% c('value'))]
####################################
# Actually create the models
####################################
####################################
# Set indicators for the state's most current prediction date
####################################
#Make indicators for the last prediction for each state-year
temp<-sql("
select
election_year
,State
,min(days_till_election) as final_poll_days_till_election
from polls_altered_final
group by 1,2
")
polls_altered_final<-sql("
select
paf.*
,case when final_poll_days_till_election=days_till_election then 1 else 0 end as final_prediction_ind
from polls_altered_final paf
inner join temp t on paf.election_year=t.election_year and paf.State=t.State
")
write.csv(polls_altered_final,'forecasts\\polls_altered_final.csv',row.names = FALSE)
####################################
# Set indicators for the state's most current prediction date
####################################
polls_altered_2016[polls_altered_2016$state=='PA',]
state_odds
#########################################################################################################################################
# ELECTION SIMULATION
#########################################################################################################################################
#HERE TO EDIT
state_odds<-sqldf("
select
msr.state
,abb
,electoral_votes
,ifnull(dem_prob,msr.hist_dem_prob) as dem_prob
,mean
,sd
from master_state_ref msr
left join
(
select
state
,hist_dem_prob
,nearest_neighbor_value as dem_prob
,mean
,sd
from polls_altered_final paf
where final_prediction_ind=1
and election_year=2016
and prediction='prob_weighted_dem'
) as t1
on msr.abb=t1.state
")
state_odds<-sql("
select
so.state
,so.abb
,so.electoral_votes
,dem_prob
,ifnull(mean,(`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4) as mean
,ifnull(sd,sqrt(power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2000_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2004_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2008_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2012_dem_margin`),2))) as sd
from state_odds so
inner join master_state_ref msr on so.state=msr.state
")
state_odds
polls_altered_2016[polls_altered_2016$state=='IA',]
polls_altered_2016[polls_altered_2016$state=='IN',]
n<-1000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
if(i %% 1000 == 0){print(paste('CURRENTLY ON ELECTION SIMULATION:',i))}
state_odds_rand<-state_odds[sample(nrow(state_odds)),]
electoral_votes<-0
margins<-c()
for(j in 1:nrow(state_odds_rand)){
if(j==1){
margin<-rnorm(1,state_odds_rand$mean[j],state_odds_rand$sd[j])
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
else {
corr<-t(master_state_ref)
colnames(corr)<-corr['abb',]
corr<-data.frame(corr[12:15,],stringsAsFactors = FALSE)
corr<-sapply(corr,as.numeric)
corr<-cor(corr[,state_odds_rand$abb[(j-1):j]])
correlation<-corr[1,2]
updated_mean<-state_odds_rand$mean[j] +
correlation*(state_odds_rand$sd[(j-1)]/state_odds_rand$sd[j])*
(margins[(j-1)]-state_odds_rand$mean[(j-1)])
updated_sd<-sqrt(state_odds_rand$sd[j]^2*(1-correlation^2))
margin<-rnorm(1,updated_mean,updated_sd)
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
if(win_or_lose==1){
electoral_votes<-electoral_votes+state_odds_rand[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
dem_prob

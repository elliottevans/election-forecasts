<<<<<<< HEAD
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = 1, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*5000
state_coord$Y<-state_coord$Y*5000
scalar<-3.8
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-3.8
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-6
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-50
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-500
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-250
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=.9)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.3)
bla_plot <- recordPlot()
statebins()
statebins
bla
bla_plot
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-150
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-180
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1000
state_coord$Y<-state_coord$Y*1000
scalar<-190
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1050
state_coord$Y<-state_coord$Y*1050
scalar<-190
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1050
state_coord$Y<-state_coord$Y*1050
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1050
state_coord$Y<-state_coord$Y*1050
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(2*min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), 2*max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1050
state_coord$Y<-state_coord$Y*1050
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(.7*min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), .7*max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1050
state_coord$Y<-state_coord$Y*1050
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1050
state_coord$Y<-state_coord$Y*1050
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.6)
bla_plot <- recordPlot()
state_coord<-read.csv('data_sets/state_coordinates.csv')
state_coord<-sql("
select
sd.*
,electoral_votes
,color
from state_coord sd
left join dat on sd.ST=dat.state
left join state_odds so on so.abb=dat.state
")
state_coord$X<-state_coord$X*1050
state_coord$Y<-state_coord$Y*1050
scalar<-200
plot(state_coord$x, state_coord$y, xlim = c(min(state_coord$X-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$X+scalar*sqrt(state_coord$electoral_votes))),
ylim = c(min(state_coord$Y-scalar*sqrt(state_coord$electoral_votes)), max(state_coord$Y+scalar*sqrt(state_coord$electoral_votes))), type = "n",
asp = NA, xlab = "", ylab = "", axes = FALSE)
bla_plot <- recordPlot()
rect(xleft=state_coord$X-scalar*sqrt(state_coord$electoral_votes)
,ybottom=state_coord$Y-scalar*sqrt(state_coord$electoral_votes)
,xright=state_coord$X+scalar*sqrt(state_coord$electoral_votes)
,ytop=state_coord$Y+scalar*sqrt(state_coord$electoral_votes)
,col=state_coord$color
,border='white')
text(state_coord$X, state_coord$Y, state_coord$ST,
col = 'black',cex=1.5)
bla_plot <- recordPlot()
bla
bla_plot
=======
#   ,m.model as prediction
#   ,NULL as value
#   ,NULL as final_prediction_ind
#   ,s.state as state_full
#   ,`Electoral.Votes` as state_electoral_votes
#   ,`X.Location` as x_location
#   ,`Y.Location` as y_location
#   ,NULL as Pollster
#   ,NULL as Candidate
#   ,NULL as poll_value
#   ,NULL as party
#   ,`X2004` as `2004_state_result`
#   ,`X2008` as `2008_state_result`
#   ,`X2012` as `2012_state_result`
# from year_df y
#   inner join model_df m on 1=1
#   inner join states_df s on 1=1
#   inner join state_abb sa on sa.name=s.state
#   inner join electoral_votes ev on ev.State=s.state
#   inner join state_actuals on state_actuals.State=sa.name
# ")
#
# master_forecasts<-data.frame(rbind(master_forecasts,dummy))
# ######################################################################
# # INCLDE DUMMY DATA FOR STATES THAT HAVENT BEEN POLLED YET
# ######################################################################
#
#
# write.csv(master_forecasts,'forecasts\\master_forecasts.csv',row.names = FALSE)
gg
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show_guide=FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
#gg <- gg + theme(legend.position="none")
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
######################################################################
# MAP
######################################################################
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show_guide=FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
#gg <- gg + theme(legend.position="none")
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
######################################################################
# MAP
######################################################################
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show_guide=FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
#gg <- gg + theme(legend.position="none")
gg <- gg + scale_colour_continuous(low = "red", high = "blue", space = "Lab", guide = "colorbar")
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show_guide=FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
gg <- gg + theme(legend.position="none")
gg <- gg + scale_colour_continuous(low = "red", high = "blue", space = "Lab", guide = "colorbar")
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
######################################################################
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show.legend=FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
gg <- gg + theme(legend.position="none")
gg <- gg + scale_colour_continuous(low = "red", high = "blue", space = "Lab", guide = "colorbar")
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
######################################################################
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show.legend=TRUE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
#gg <- gg + theme(legend.position="none")
gg <- gg + scale_colour_continuous(low = "red", high = "blue", space = "Lab", guide = "colorbar")
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
######################################################################
# MAP
######################################################################
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show.legend=TRUE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
#gg <- gg + theme(legend.position="none")
#gg <- gg + scale_colour_continuous(low = "red", high = "blue", space = "Lab", guide = "colorbar")
gg <- gg + scale_colour_manual(values = c('red','blue'))
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
######################################################################
# MAP
######################################################################
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show.legend=FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
#gg <- gg + theme(legend.position="none")
#gg <- gg + scale_colour_continuous(low = "red", high = "blue", space = "Lab", guide = "colorbar")
gg <- gg + scale_colour_manual(values = c('red','blue'))
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
######################################################################
# MAP
######################################################################
bla<-master_forecasts[master_forecasts$election_year==2016,]
bla<-bla[bla$prediction %in% c("prob_weighted_dem","prob_weighted_rep"),]
poll_data<-bla[!is.na(bla$Candidate),]
relevant_list<-unique(bla$state_full)
poll_data$value<-100*as.numeric(poll_data$value)
poll_data<-poll_data[poll_data$final_prediction_ind==1,c("State","value","prediction")]
poll_data<-sql("
select
State
,max(case when prediction='prob_weighted_rep' then value end)
-max(case when prediction='prob_weighted_dem' then value end) as diff
from poll_data
group by 1
")
poll_data<-sql("
select
sabb.name
,sabb.abb as iso3166_2
,X2000 as `2000_result`
,X2004 as `2004_result`
,X2008 as `2008_result`
,X2012 as `2012_result`
,`Electoral.Votes` as `electoral_votes`
,diff
from state_abb sabb
left join poll_data pd on pd.State=sabb.abb
left join state_actuals sact on sact.State=sabb.name
left join electoral_votes ev on ev.State=sabb.name
")
us <- readOGR("C:\\Users\\Elliott\\Desktop\\Random Analysis\\2016_election_analysis\\map\\us_states_hexgrid.geojson", "OGRGeoJSON")
centers <- cbind.data.frame(data.frame(gCentroid(us, byid=TRUE), id=us@data$iso3166_2))
us_map <- fortify(us, region="iso3166_2")
ggplot(data=us_map, aes(map_id=id, x=long, y=lat)) + geom_map(map=us_map, color="black", fill="white")
gg <- ggplot()
gg <- gg + geom_map(data=us_map, map=us_map,
aes(x=long, y=lat, map_id=id),
color="white", size=0.5)
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(fill=diff, map_id=iso3166_2))
gg <- gg + geom_map(data=poll_data, map=us_map,
aes(map_id=iso3166_2),
fill="#ffffff", alpha=0, color="white",
show.legend=FALSE)
gg <- gg + geom_text(data=centers, aes(label=id, x=x, y=y), color="white", size=6)
gg <- gg + scale_fill_distiller(palette="RdBu", na.value="gray56")
gg <- gg + coord_map()
gg <- gg + labs(x=NULL, y=NULL)
gg <- gg + theme_bw()
gg <- gg + theme(legend.position="none")
gg <- gg + theme(panel.border=element_blank())
gg <- gg + theme(panel.grid=element_blank())
gg <- gg + theme(axis.ticks=element_blank())
gg <- gg + theme(axis.text=element_blank())
gg
>>>>>>> added files

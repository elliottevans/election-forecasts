,hist_dem_prob
,nearest_neighbor_value as dem_prob
,mean
,sd
from polls_altered_final paf
where final_prediction_ind=1
and election_year=2012
and prediction='prob_weighted_dem'
) as t1
on msr.abb=t1.state
")
state_odds<-sql("
select
so.state
,so.abb
,so.electoral_votes
,dem_prob
,ifnull(mean,(`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3) as mean
,ifnull(sd,sqrt(power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3)-`2000_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3)-`2004_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3)-`2008_dem_margin`),2))) as sd
from state_odds so
inner join master_state_ref msr on so.state=msr.state
")
state_odds
bla<-polls_altered_final[polls_altered_final$election_year==2012,]
bla<-bla[bla$state=='OH',]
bla
n<-5000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
state_odds_rand<-state_odds[sample(nrow(state_odds)),]
electoral_votes<-0
margins<-c()
for(j in 1:nrow(state_odds_rand)){
if(j==1){
margin<-rnorm(1,state_odds_rand$mean[j],state_odds_rand$sd[j])
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
else {
corr<-t(master_state_ref)
colnames(corr)<-corr['abb',]
corr<-data.frame(corr[12:15,],stringsAsFactors = FALSE)
corr<-sapply(corr,as.numeric)
corr<-cor(corr[,state_odds_rand$abb[(j-1):j]])
correlation<-corr[1,2]
updated_mean<-state_odds_rand$mean[j] +
correlation*(state_odds_rand$sd[(j-1)]/state_odds_rand$sd[j])*
(margins[(j-1)]-state_odds_rand$mean[(j-1)])
updated_sd<-sqrt(state_odds_rand$sd[j]^2*(1-correlation^2))
margin<-rnorm(1,updated_mean,updated_sd)
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
if(win_or_lose==1){
electoral_votes<-electoral_votes+state_odds_rand[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
state_odds
#########################################################################################################################################
# ELECTION SIMULATION
#########################################################################################################################################
#HERE TO EDIT
state_odds<-sqldf("
select
msr.state
,abb
,electoral_votes
,ifnull(dem_prob,msr.hist_dem_prob) as dem_prob
,mean
,sd
from master_state_ref msr
left join
(
select
state
,hist_dem_prob
,nearest_neighbor_value as dem_prob
,mean
,sd
from polls_altered_final paf
where final_prediction_ind=1
and election_year=2012
and prediction='prob_weighted_dem'
) as t1
on msr.abb=t1.state
")
state_odds<-sql("
select
so.state
,so.abb
,so.electoral_votes
,dem_prob
,ifnull(mean,(`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3) as mean
,ifnull(sd,sqrt(power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3)-`2000_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3)-`2004_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`)/3)-`2008_dem_margin`),2))) as sd
from state_odds so
inner join master_state_ref msr on so.state=msr.state
")
n<-5000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
state_odds_rand<-state_odds[sample(nrow(state_odds)),]
electoral_votes<-0
margins<-c()
for(j in 1:nrow(state_odds_rand)){
if(j==1){
margin<-rnorm(1,state_odds_rand$mean[j],state_odds_rand$sd[j])
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
else {
corr<-t(master_state_ref)
colnames(corr)<-corr['abb',]
corr<-data.frame(corr[12:15,],stringsAsFactors = FALSE)
corr<-sapply(corr,as.numeric)
corr<-cor(corr[,state_odds_rand$abb[(j-1):j]])
correlation<-corr[1,2]
updated_mean<-state_odds_rand$mean[j] +
correlation*(state_odds_rand$sd[(j-1)]/state_odds_rand$sd[j])*
(margins[(j-1)]-state_odds_rand$mean[(j-1)])
updated_sd<-sqrt(state_odds_rand$sd[j]^2*(1-correlation^2))
margin<-rnorm(1,updated_mean,updated_sd)
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
if(win_or_lose==1){
electoral_votes<-electoral_votes+state_odds_rand[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
i
j
margin
corr
corr<-master_state_ref
corr<-t(master_state_ref)
corr
n<-5000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
state_odds_rand<-state_odds[sample(nrow(state_odds)),]
electoral_votes<-0
margins<-c()
for(j in 1:nrow(state_odds_rand)){
if(j==1){
margin<-rnorm(1,state_odds_rand$mean[j],state_odds_rand$sd[j])
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
else {
corr<-t(master_state_ref)
colnames(corr)<-corr['abb',]
corr<-data.frame(corr[11:13,],stringsAsFactors = FALSE)
corr<-sapply(corr,as.numeric)
corr<-cor(corr[,state_odds_rand$abb[(j-1):j]])
correlation<-corr[1,2]
updated_mean<-state_odds_rand$mean[j] +
correlation*(state_odds_rand$sd[(j-1)]/state_odds_rand$sd[j])*
(margins[(j-1)]-state_odds_rand$mean[(j-1)])
updated_sd<-sqrt(state_odds_rand$sd[j]^2*(1-correlation^2))
margin<-rnorm(1,updated_mean,updated_sd)
if(margin>=0){win_or_lose<-1}else{win_or_lose<-0}
margins<-append(margins,margin)
}
if(win_or_lose==1){
electoral_votes<-electoral_votes+state_odds_rand[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
dem_prob
#########################################################################################################################################
# VISUALIZATION: HISTOGRAMS
#########################################################################################################################################
hist_data<-
data.frame(
rbind(
cbind(rep('Obama',length(electoral_vote_list)),electoral_vote_list)
,cbind(rep('Romney',length(electoral_vote_list)),538-electoral_vote_list)
)
)
names(hist_data)<-c('candidate','electoral_votes')
hist_data$electoral_votes<-as.numeric(as.character(hist_data$electoral_votes))
sum_dat<-ddply(hist_data, "candidate", summarise, electoral_votes.mean=mean(electoral_votes))
if(sum_dat[sum_dat$candidate=='Obama',2]>=270){
clinton_label_spot<-sum_dat[sum_dat$candidate=='Obama',2]+12
trump_label_spot<-sum_dat[sum_dat$candidate=='Romney',2]-12
}else{
clinton_label_spot<-sum_dat[sum_dat$candidate=='Obama',2]-12
trump_label_spot<-sum_dat[sum_dat$candidate=='Romney',2]+12
}
line_lengths<-sql("
select
hd.candidate
,count(case when electoral_votes>=round(`electoral_votes.mean`)-2 and electoral_votes<=round(`electoral_votes.mean`)+2 then hd.candidate end) as counter
from hist_data hd
inner join sum_dat sd on sd.candidate=hd.candidate
group by 1
")
simulated_result<-ggplot(hist_data, aes(x=electoral_votes, fill=candidate)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+
scale_fill_manual(values=c("deepskyblue", "firebrick1"))+
geom_text(aes(x=clinton_label_spot, label=round(sum_dat[sum_dat$candidate=='Obama',2]), y=60), colour="blue",size=8)+
geom_text(aes(x=trump_label_spot, label=round(sum_dat[sum_dat$candidate=='Romney',2]), y=60), colour="red3",size=8)+
geom_text(aes(x=270, label='270 to Win', y=380),size=8)+
ggtitle("Electoral Votes")+
ylab("Frequency")+
xlab("Electoral Votes")+
guides(fill=guide_legend(title=NULL))+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=31))+
theme(axis.text=element_text(size=18))+
theme(axis.title=element_text(size=22))+
theme(legend.text = element_text(size = 19, face = "bold"))+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Obama',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Obama',2]), yend = line_lengths[line_lengths$candidate=='Obama','counter']), colour = "blue",linetype='dashed',size=1)+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Romney',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Romney',2]), yend = line_lengths[line_lengths$candidate=='Romney','counter']), colour = "red3",linetype='dashed',size=1)+
geom_segment(aes(x = 270, y = 0, xend = 270, yend = 360),linetype='dashed',size=1)
#########################################################################################################################################
# VISUALIZATION: HISTOGRAMS
#########################################################################################################################################
simulated_result
source('~/election_forecasts/main.R')
dem_prob
source('~/election_forecasts/prep.R')
###########################
# 2004 Polling
###########################
#Obtained from http://www.electoral-vote.com/evp2012/Info/datagalore.html
polls_2004<-read.csv("polls\\polls_2004.csv")
polls_2004<-data.frame(cbind(seq(1,nrow(polls_2004)),'2004',polls_2004))
names(polls_2004)[1:2]<-c('id','election_year')
polls_2004<-melt(polls_2004,id=c("id","election_year","State","Date","Pollster"))
names(polls_2004)[6]<-"Candidate"
polls_2004$Date<-as.Date(paste(polls_2004$Date,'2004'),format='%m/%d %Y')
polls_2004<-sql(
"
select
p.*
,case when Candidate='Kerry' then 'D' else 'R' end as party
from polls_2004 p
"
)
#Add on days before general election
polls_2004<-data.frame(cbind(polls_2004,difftime(as.Date('2004-11-02'),polls_2004$Date,units="days")))
names(polls_2004)[ncol(polls_2004)]<-'days_till_election'
polls_2004$days_till_election<-as.numeric(polls_2004$days_till_election)
polls_2004<-sql("
select
election_year
,State
,Date
,Candidate
,party
,days_till_election
,min(id) as id
,avg(value) as value
from polls_2004
group by 1,2,3,4,5,6
")
###########################
# 2004 Polling
###########################
dim(pols_2004)
dim(polls_2004)
setwd("~/election_forecasts")
source("prep.R")
#Functions created: multiplot, sql
#Data sets created:
#   1. master_state_ref
#   2. polls_2000
#   3. polls_2004
#   4. polls_2008
#   5. polls_2012
#   6. polls_2016
#   7. polls
dim(polls_2016)
dim(polls_2004)
head(polls_2016)
###########################
# 2016 Polling
###########################
#Use HuffPollster API
polls_2016<-data.frame()
states<-append(state.abb,"DC")
for(i in 1:length(states)){
print(noquote(paste("CURRENTLY GETTING STATE:",states[i])))
temp1<-pollstr_polls(topic='2016-president',showall=FALSE,state=states[i],max_pages=50)
temp2<-temp1$polls
temp3<-temp1$question
if(dim(temp3)[1]==0) next
temp4<-sql(
"
select
id
,'2016' as election_year
,state as State
,start_date
,pollster as Pollster
,choice as Candidate
,value
,case when choice='Clinton' then 'D' else 'R' end as party
from temp2
inner join temp3 using (id)
where topic='2016-president'
and choice in ('Trump','Clinton')
"
)
temp4$State<-states[i]
polls_2016<-rbind(polls_2016,temp4)
}
names(polls_2016)[4]<-'Date'
#Add on days before general election
polls_2016<-data.frame(cbind(polls_2016,difftime(as.Date('2016-11-08'),polls_2016$Date,units="days")))
names(polls_2016)[ncol(polls_2016)]<-'days_till_election'
# polls_2016$days_till_election<-as.numeric(polls_2016$days_till_election)
# polls_2016<-sql("
# select
#   election_year
#   ,State
#   ,Date
#   ,Candidate
#   ,party
#   ,days_till_election
#   ,min(id) as id
#   ,avg(value) as value
# from polls_2016
#   group by 1,2,3,4,5,6
# ")
#Write 2016 polls to csv file
dim(polls_2016)
polls_2016
tail(polls_2016)
state_odds
###########################
# 2016 Polling
###########################
#Use HuffPollster API
polls_2016<-data.frame()
states<-append(state.abb,"DC")
for(i in 1:length(states)){
print(noquote(paste("CURRENTLY GETTING STATE:",states[i])))
temp1<-pollstr_polls(topic='2016-president',showall=FALSE,state=states[i],max_pages=50)
temp2<-temp1$polls
temp3<-temp1$question
if(dim(temp3)[1]==0) next
temp4<-sql(
"
select
id
,'2016' as election_year
,state as State
,start_date
,pollster as Pollster
,choice as Candidate
,value
,case when choice='Clinton' then 'D' else 'R' end as party
from temp2
inner join temp3 using (id)
where topic='2016-president'
and choice in ('Trump','Clinton')
"
)
temp4$State<-states[i]
polls_2016<-rbind(polls_2016,temp4)
}
names(polls_2016)[4]<-'Date'
#Add on days before general election
polls_2016<-data.frame(cbind(polls_2016,difftime(as.Date('2016-11-08'),polls_2016$Date,units="days")))
names(polls_2016)[ncol(polls_2016)]<-'days_till_election'
polls_2016$days_till_election<-as.numeric(polls_2016$days_till_election)
polls_2016<-sql("
select
election_year
,State
,Date
,Candidate
,party
,days_till_election
,min(id) as id
,avg(value) as value
from polls_2016
group by 1,2,3,4,5,6
")
#Write 2016 polls to csv file
write.csv(polls_2016,'polls\\polls_2016.csv',row.names = FALSE)
dim(polls_2016)
source('~/election_forecasts/main.R')
dem_prob
state_odds
dim(polls_altered_2016)
tail(polls_altered_2016)
#########################################################################################################################################
# VISUALIZATION: HISTOGRAMS
#########################################################################################################################################
hist_data<-
data.frame(
rbind(
cbind(rep('Clinton',length(electoral_vote_list)),electoral_vote_list)
,cbind(rep('Trump',length(electoral_vote_list)),538-electoral_vote_list)
)
)
names(hist_data)<-c('candidate','electoral_votes')
hist_data$electoral_votes<-as.numeric(as.character(hist_data$electoral_votes))
sum_dat<-ddply(hist_data, "candidate", summarise, electoral_votes.mean=mean(electoral_votes))
if(sum_dat[sum_dat$candidate=='Clinton',2]>=270){
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]+12
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]-12
}else{
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]-12
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]+12
}
line_lengths<-sql("
select
hd.candidate
,count(case when electoral_votes>=round(`electoral_votes.mean`)-2 and electoral_votes<=round(`electoral_votes.mean`)+2 then hd.candidate end) as counter
from hist_data hd
inner join sum_dat sd on sd.candidate=hd.candidate
group by 1
")
simulated_result<-ggplot(hist_data, aes(x=electoral_votes, fill=candidate)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+
scale_fill_manual(values=c("deepskyblue", "firebrick1"))+
geom_text(aes(x=clinton_label_spot, label=round(sum_dat[sum_dat$candidate=='Clinton',2]), y=60), colour="blue",size=8)+
geom_text(aes(x=trump_label_spot, label=round(sum_dat[sum_dat$candidate=='Trump',2]), y=60), colour="red3",size=8)+
geom_text(aes(x=270, label='270 to Win', y=380),size=8)+
ggtitle("Electoral Votes")+
ylab("Frequency")+
xlab("Electoral Votes")+
guides(fill=guide_legend(title=NULL))+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=31))+
theme(axis.text=element_text(size=18))+
theme(axis.title=element_text(size=22))+
theme(legend.text = element_text(size = 19, face = "bold"))+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Clinton',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Clinton',2]), yend = line_lengths[line_lengths$candidate=='Clinton','counter']), colour = "blue",linetype='dashed',size=1)+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Trump',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Trump',2]), yend = line_lengths[line_lengths$candidate=='Trump','counter']), colour = "red3",linetype='dashed',size=1)+
geom_segment(aes(x = 270, y = 0, xend = 270, yend = 360),linetype='dashed',size=1)
#########################################################################################################################################
# VISUALIZATION: HISTOGRAMS
#############################################
simulated_result
dem_prob
#########################################################################################################################################
# VISUALIZATION: STATE GRAPHS
#########################################################################################################################################
temp<-sql("
select
paf.*
,msr.state as state_full
,candidate as candidate
from polls_altered_final paf
inner join polls p on paf.election_year=p.election_year
and p.State=paf.State
and (case when prediction in ('prob_unweighted_dem','prob_weighted_dem') then 'D'
when prediction in ('prob_unweighted_rep','prob_weighted_rep') then 'R'
end) = p.party
and p.id=paf.id
inner join master_state_ref msr on paf.state=msr.abb
where paf.election_year=2016
")
relevant_list<-sort(unique(temp$state_full))
relevant_list_abb<-unique(temp[order(temp$state_full),'state'])
temp$value<-100*as.numeric(temp$nearest_neighbor_value)
temp<-sql("
select
t.*
,case when value>99.9 then '>99.9'
when value<.1 then '<.1'
else cast(round(value,1) as text) end as poll_data_value_label
from temp t
")
plots<-vector('list', length(relevant_list))
for(i in 1:length(relevant_list)){
state<-relevant_list[i]
state_abbrev<-relevant_list_abb[i]
if(nchar(state)>10){state_label<-state_abbrev}else{state_label<-state}
temp_new<-temp[temp$state_full==state,]
poll_temp<-temp_new[temp_new$final_prediction_ind==1,]
plot<- ggplot(data=temp_new,aes(x=date,y=value,colour=candidate,group=candidate)) +
geom_line(size=1.5) +
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
ggtitle(
paste(state_label," - ",as.character(poll_temp[which.max(poll_temp$value),'candidate']),sub(" ", "",paste(poll_temp[which.max(poll_temp$value),'poll_data_value_label'],"%"),fixed=TRUE))
)+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=19))+
theme(legend.position = "none")+
scale_color_manual(values=c("deepskyblue", "firebrick1"))+
theme(axis.title.y=element_blank())+
theme(axis.title.x=element_blank())+
scale_y_continuous(limits = c(0, 100))
plots[[i]]<-plot
}
multiplot(plotlist = plots,cols=3)

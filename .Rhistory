}
prop_weight_list<-append(prop_weight_list,prop_weights)
temp5<-data.frame(cbind(temp5,exp_weighted_avg,exp_weights,prop_weighted_avg))
polls_altered<-data.frame(rbind(polls_altered,temp5))
}
}
polls_altered<-data.frame(cbind(polls_altered,prop_weight_list))
names(polls_altered)[ncol(polls_altered)]<-'prop_weights'
source('~/election_forecasts/main.R')
m
l
temp3
temp4
temp3[order(-temp3$days_till_election),]
typeof(temp3$days_till_election)
temp3[order(-as.numeric(temp3$days_till_election)0,]
temp3[order(-as.numeric(temp3$days_till_election)),]
head(polls)
typeof(polls$election_year)
typeof(polls$State)
typeof(polls$Date)
typeof(polls$days_till_election)
polls$State<-as.factor(polls$State)
polls$Date<-as.Date(polls$Date)
typeof(polls$value)
head(polls[polls$election_year==2016,])
polls$State<-as.factor(polls$State)
polls$Date<-as.Date(polls$Date)
polls$Candidate<-as.character(polls$Candidate)
polls$party<-as.character(polls$party)
polls$days_till_election<-as.numeric(polls$days_till_election)
polls$id<-as.numeric(polls$id)
polls$value<-as.numeric(polls$value)
head(polls)
head(polls[is.na(polls$election_year)==TRUE,])
head(polls[is.na(polls$State)==TRUE,])
polls[is.na(polls$Candidate)==TRUE,]
polls[is.na(polls$party)==TRUE,]
polls[is.na(polls$days_till_election)==TRUE,]
polls[is.na(polls$id)==TRUE,]
polls[is.na(polls$value)==TRUE,]
head(polls)
polls<-rbind(polls,c(as.character(2016),'OH','2016-06-28','Clinton','D',difftime(as.Date('2016-11-08'),'2016-06,28',units="days"),24940,46))
polls<-rbind(polls,c(as.character(2016),'OH','2016-06-28','Clinton','D',difftime(as.Date('2016-11-08'),'2016-06-28',units="days"),24940,46))
polls<-rbind(polls,c(as.character(2016),'OH','2016-06-28','Clinton','D',difftime(as.Date('2016-11-08'),'2016-06-28',units="days"),24940,46))
polls<-rbind(polls,c(as.character(2016),'PA','2016-06-28','Clinton','D',difftime(as.Date('2016-11-08'),'2016-06-28',units="days"),24941,48))
polls<-rbind(polls,c(2016,'OH','2016-06-28','Clinton','D',difftime(as.Date('2016-11-08'),'2016-06-28',units="days"),24940,46))
polls<-rbind(polls,c(2016,'PA','2016-06-28','Clinton','D',difftime(as.Date('2016-11-08'),'2016-06-28',units="days"),24941,48))
source('~/election_forecasts/main.R')
temp3
temp3[order(-temp3$days_till_election),]
temp3[order(temp3$days_till_election),]
temp3[-order(temp3$days_till_election),]
typeof(temp3$days_till_election)
typeof(polls$days_till_election)
polls$State<-as.factor(polls$State)
polls$Date<-as.Date(polls$Date)
polls$Candidate<-as.character(polls$Candidate)
polls$party<-as.character(polls$party)
polls$days_till_election<-as.numeric(polls$days_till_election)
polls$id<-as.numeric(polls$id)
polls$value<-as.numeric(polls$value)
typeof(polls$days_till_election)
source('~/election_forecasts/main.R')
dem_prob
multiplot(plotlist = plots,cols=3)
source('~/election_forecasts/main.R')
dem_prob
source('~/election_forecasts/main.R')
dem_prob
polls<-polls[polls$Date<=as.Date("1999-06-14"),]
polls
source('~/election_forecasts/main.R')
dem_prob
source('~/election_forecasts/main.R')
dem_prob
source('~/election_forecasts/main.R')
mean(electoral_votes)
dem_prob
source('~/election_forecasts/main.R')
dem_prob
mean(electoral_votes)
electoral_votes
source('~/election_forecasts/main.R')
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "black",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey41",font=2)
par(bg = 'blue')    par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "black",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey41",font=2)
par(bg = 'blue')
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "black",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey41",font=2)
par(bg = 'dodgerblue')
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "black",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey41",font=2)
winner
#########################################################################################################################################
# RESULTS
#########################################################################################################################################
if(dem_prob>=.5){
winner<-'Hillary Clinton'
loser<-'Donald Trump'
winner_prob<-paste0(round(100*dem_prob,1),'%')
loser_prob<-paste0(100-round(100*dem_prob,1),'%')
winning_electoral_votes<-round(mean(electoral_vote_list),0)
losing_electoral_votes<-538-winning_electoral_votes
color<-'dodgerblue'
num_states_won<-nrow(state_odds[state_odds$mean>0,])
if(state_odds[state_odds$state=='Washington DC','mean']>0){
plus_dc<-", plus DC,"
num_states_won<-num_states_won-1
}else{plus_dc<-","}
winner_pronoun<-"She"
loser_pronoun<-"He"
if(round(100*dem_prob,1)<90 && round(100*dem_prob,1)>=80){a_or_an<-'an'}else{ a_or_an<-'a'}
}else{
winner<-'Donald Trump'
loser<-'Hillary Clinton'
winner_prob<-paste0(100-round(100*dem_prob,1),'%')
loser_prob<-paste0(round(100*dem_prob,1),'%')
winning_electoral_votes<-538-round(mean(electoral_vote_list),0)
losing_electoral_votes<-round(mean(electoral_vote_list),0)
color<-'firebrick1'
num_states_won<-nrow(state_odds[state_odds$mean<0,])
if(state_odds[state_odds$state=='Washington DC','mean']<0){
plus_dc<-', plus DC,'
num_states_won<-num_states_won-1
}else{plus_dc<-","}
winner_pronoun<-'He'
loser_pronoun<-'She'
if(100-round(100*dem_prob,1)<90 && 100-round(100*dem_prob,1)>=80 ){a_or_an<-'an'}else{ a_or_an<-'a'}
}
color
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "black",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey41",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "black",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey88",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "grey88",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "black",font=2)
par(bg = 'firebrick1')
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "grey88",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "black",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "grey88",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "black",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "black",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "black",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "grey39",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "black",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "grey72",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "black",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "white",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "black",font=2)
par(bg = color)
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "white",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey88",font=2)
par(bg = 'firebrick1')
par(mar = c(0,0,0,0))
plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
cex = 2, col = "white",font=2)
text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
cex = 1.6, col = "grey88",font=2)
setwd("~/election_forecasts")
source("prep.R")
#Functions created: multiplot, sql
#Data sets created:
#   1. master_state_ref
#   2. polls_2000
#   3. polls_2004
#   4. polls_2008
#   5. polls_2012
#   6. polls_2016
#   7. polls
#polls<-polls[polls$Date<=as.Date("2016-06-19"),]
#########################################################################################################################################
# CREATE WEIGHTED POLLING AVERAGES
#########################################################################################################################################
temp1<-sql("
Select
id
,election_year
,state as state
,date
,days_till_election
,sum(case when party='D' then value else 0 end) -
sum(case when party='R' then value else 0 end) as dem_plus_minus
from polls
group by 1,2,3
")
names(temp1)<-c('id','election_year','state','date','days_till_election','dem_plus_minus')
#Create running averages of polling margins
years<-c(2000,2004,2008,2012,2016)
polls_altered<-data.frame()
prop_weights<-c()
prop_weight_list<-c()
#1:length(years)
for(l in 1:length(years)){
year<-years[l]
temp2<-temp1[temp1$election_year==year,]
states<-unique(temp2$state)
#1:length(states)
for(m in 1:length(states)){
state<-states[m]
temp3<-temp2[temp2$state==state,]
temp4<-temp3[order(-temp3$days_till_election),]
exp_weighted_avg<-c()
running_avg<-c()
prop_weighted_avg<-c()
for(p in 1:nrow(temp4)){
#Note that we give more weight to polls closer to the election day
#EXPONENTIAL WEIGHTING
temp5<-temp4[1:p,]
n<-nrow(temp5)
exp_weights<-c()
weight_sum<-0
for(i in 1:n){
sum<-1
j<-1
while(j >=1 && j<=(n-1)){
sum_temp<-0
k<-i
while(k>=i && k<=j){
sum_temp<-sum_temp+temp5$days_till_election[k]/temp5$days_till_election[k+1]
k<-k+1
}
if(i>j){sum<-sum+0}else{sum<-sum+(1.3^sum_temp)}
j<-j+1
}
sum<-(1-weight_sum)*(sum^(-1))
weight_sum<-weight_sum+sum
exp_weights<-append(exp_weights,sum)
}
exp_weighted_avg<-append(exp_weighted_avg,sum(temp5$dem_plus_minus*exp_weights))
#PROPORTIONAL WEIGHTING
running_avg<-append(running_avg,sum(temp4$dem_plus_minus[1:p])/p)
prop_weighted_avg<-append(prop_weighted_avg,sum(temp4$dem_plus_minus[1:p] * (sort(temp4$days_till_election[1:p]))/sum(temp4$days_till_election[1:p])))
prop_weights<-(sort(temp4$days_till_election[1:p]))/sum(temp4$days_till_election[1:p])
}
prop_weight_list<-append(prop_weight_list,prop_weights)
temp5<-data.frame(cbind(temp5,exp_weighted_avg,exp_weights,prop_weighted_avg))
polls_altered<-data.frame(rbind(polls_altered,temp5))
}
}
polls_altered<-data.frame(cbind(polls_altered,prop_weight_list))
names(polls_altered)[ncol(polls_altered)]<-'prop_weights'
polls_altered<-sql("
select
temp1.*
,case when actual='D' then 1
when actual='R' then 0
when election_year=2016 then '' end as actual_binary_dem
from
(
select
pa.*
,case when pa.election_year=2000 then hist_dem_prob_2000
when pa.election_year=2004 then hist_dem_prob_2004
when pa.election_year=2008 then hist_dem_prob_2008
when pa.election_year=2012 then hist_dem_prob_2012
when pa.election_year=2016 then hist_dem_prob end as hist_dem_prob
,case when pa.election_year=2000 then msr.`2000`
when pa.election_year=2004 then msr.`2004`
when pa.election_year=2008 then msr.`2008`
when pa.election_year=2012 then msr.`2012`
when pa.election_year=2016 then '' end as actual
,case when pa.election_year=2000 then msr.`2000_dem_margin`
when pa.election_year=2004 then msr.`2004_dem_margin`
when pa.election_year=2008 then msr.`2008_dem_margin`
when pa.election_year=2012 then msr.`2012_dem_margin`
when pa.election_year=2016 then '' end as actual_dem_margin
from polls_altered pa
inner join master_state_ref msr on msr.abb=pa.state
) as temp1
")
polls_altered[polls_altered$election_year==2016,'actual_binary_dem']<-''
#########################################################################################################################################
# CREATE WEIGHTED POLLING AVERAGES
#########################################################################################################################################
#########################################################################################################################################
# NEAREST NEIGHBOR LEARNING
#########################################################################################################################################
#k_run<-100
temp<-polls_altered
#standardize metrics for nearest neighbor algorithm
temp$days_till_election<-temp$days_till_election-mean(temp$days_till_election)
temp$days_till_election<-temp$days_till_election/sd(temp$days_till_election)
temp$exp_weighted_avg<-temp$exp_weighted_avg-mean(temp$exp_weighted_avg)
temp$exp_weighted_avg<-temp$exp_weighted_avg/sd(temp$exp_weighted_avg)
temp$hist_dem_prob<-temp$hist_dem_prob-mean(temp$hist_dem_prob)
temp$hist_dem_prob<-temp$hist_dem_prob/sd(temp$hist_dem_prob)
##########################
#Take equal parts from each year for nearest neighbor alg
#Creates indices_2000,indices_2000,indices_2008,indices_2012
#Creates train_2000,train_2004,train_2008,train_2012
##########################
#Take 15 distinct most similar states from each year to associate with curret states
years<-c(2000,2004,2008,2012)
for(i in 1:length(years)){
margins<-data.frame()
train_year<-paste0("train","_",years[i])
assign(train_year,temp[temp$election_year==years[i],])
train_temp_with_info<-train_temp<-temp[temp$election_year==years[i],]
train_temp<-temp[temp$election_year==years[i],c(
"days_till_election"
,"exp_weighted_avg"
,"hist_dem_prob"
)]
test_temp<-temp[temp$election_year==2016,c(
"days_till_election"
,"exp_weighted_avg"
,"hist_dem_prob"
)]
#1:nrow(test_temp)
for(j in 1:nrow(test_temp)){
#For each row in the testing set
unique_states_counter<-0
k<-1
while(unique_states_counter<15){
nearest<-get.knnx(train_temp,test_temp[j,],k)
indices<-nearest$nn.index
distances<-nearest$nn.dist
unique_states_counter<-length(unique(train_temp_with_info[unlist(as.list(indices)),]$state))
k<-k+1
}
#We now have a non-unique list of indices that includes 15 different states
train_temp_with_info_2<-train_temp_with_info[unlist(as.list(indices)),]
train_temp_with_info_2$distances<-unlist(as.list(distances))
states_wanted<-sql("
select
election_year
,state
,min(distances) as min_distances
,id
,actual_dem_margin
from train_temp_with_info_2 ttwi
group by state
order by 3 asc
limit 15
")
margins<-rbind(margins,as.list(states_wanted$actual_dem_margin))
}
if(i==1){margins_total<-margins}else{margins_total<-cbind(margins_total,margins)}
}
##########################
#Take equal parts from each year for nearest neighbor alg
##########################
polls_altered_2016<-polls_altered[polls_altered$election_year==2016,]
means<-c()
sds<-c()
probs<-c()
for(i in 1:nrow(polls_altered_2016)){
mean<-mean(unlist(as.list(margins_total[i,])))
sd<-sd(unlist(as.list(margins_total[i,])))
means<-append(means,mean)
sds<-append(sds,sd)
probability<-pnorm(q=0,mean=mean,sd=sd,lower.tail = FALSE)
probs<-append(probs,probability)
}
polls_altered_2016$probs<-probs
polls_altered_2016$mean<-means
polls_altered_2016$sd<-sds
#########################################################################################################################################
# NEAREST NEIGHBOR LEARNING
#########################################################################################################################################
polls_altered_final<-data.frame(cbind(polls_altered,prob_weighted_dem=NA,prob_weighted_rep=NA))
polls_altered_final<-melt(polls_altered_final,id=c('id','election_year','state','date','days_till_election','dem_plus_minus',
'exp_weighted_avg','exp_weights','prop_weighted_avg','prop_weights','hist_dem_prob','actual','actual_dem_margin','actual_binary_dem'))
names(polls_altered_final)[ncol(polls_altered_final)-1]<-'prediction'
polls_altered_final<-sql("
select
paf.*
,mean
,sd
,case when prediction='prob_weighted_rep' then 1-probs
when prediction='prob_weighted_dem' then probs
end as nearest_neighbor_value
from polls_altered_final paf
left join polls_altered_2016 pa on pa.id=paf.id
")
polls_altered_final<-polls_altered_final[,!(colnames(polls_altered_final) %in% c('value'))]
####################################
# Actually create the models
####################################
####################################
# Set indicators for the state's most current prediction date
####################################
#Make indicators for the last prediction for each state-year
temp<-sql("
select
election_year
,State
,min(days_till_election) as final_poll_days_till_election
from polls_altered_final
group by 1,2
")
polls_altered_final<-sql("
select
paf.*
,case when final_poll_days_till_election=days_till_election then 1 else 0 end as final_prediction_ind
from polls_altered_final paf
inner join temp t on paf.election_year=t.election_year and paf.State=t.State
")
write.csv(polls_altered_final,'forecasts\\polls_altered_final.csv',row.names = FALSE)
####################################
# Set indicators for the state's most current prediction date
####################################
#########################################################################################################################################
# ELECTION SIMULATION
#########################################################################################################################################
#HERE TO EDIT
state_odds<-sqldf("
select
msr.state
,abb
,electoral_votes
,ifnull(dem_prob,msr.hist_dem_prob) as dem_prob
,mean
,sd
from master_state_ref msr
left join
(
select
state
,hist_dem_prob
,nearest_neighbor_value as dem_prob
,mean
,sd
from polls_altered_final paf
where final_prediction_ind=1
and election_year=2016
and prediction='prob_weighted_dem'
) as t1
on msr.abb=t1.state
")
state_odds<-sql("
select
so.state
,so.abb
,so.electoral_votes
,dem_prob
,ifnull(mean,(`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4) as mean
,ifnull(sd,sqrt(power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2000_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2004_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2008_dem_margin`),2)+
power((((`2000_dem_margin`+`2004_dem_margin`+`2008_dem_margin`+`2012_dem_margin`)/4)-`2012_dem_margin`),2))) as sd
from state_odds so
inner join master_state_ref msr on so.state=msr.state
")
polls_altered_2016[polls_altered_2016$state=='MI',]

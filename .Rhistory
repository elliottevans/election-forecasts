source('~/election_forecastsV2/main.R')
dem_prob
odds_over_time
source('~/election_forecastsV2/main.R')
dem_prob
source('~/election_forecastsV2/main.R')
dem_prob
national_forecasts
round(100*dem_prob,1)
odds_over_time
source('~/election_forecastsV2/main.R')
dem_prob
#########################################################################################################################################
#NATIONAL FORECAST OVER TIME
#########################################################################################################################################
national_forecasts<-read.csv("forecasts\\national_forecasts.csv")
national_forecasts$date<-as.Date(national_forecasts$date)
if(nrow(national_forecasts[national_forecasts$date==run_date,])==0){
#Entry hasn't been created yet
national_forecasts<-rbind(national_forecasts,c(as.character(run_date),round(100*dem_prob,1),100-round(100*dem_prob,1)))
}else if(nrow(national_forecasts[national_forecasts$date==run_date,])!=0){
national_forecasts[national_forecasts$date==run_date,]<-c(as.character(run_date),round(100*dem_prob,1),100-round(100*dem_prob,1))
}
write.csv(national_forecasts,'forecasts\\national_forecasts.csv',row.names = FALSE)
names(national_forecasts)<-c('Date','Clinton','Trump')
national_forecasts<-melt(national_forecasts,id=c('Date'))
names(national_forecasts)<-c('date','candidate','value')
national_forecasts$value<-as.numeric(national_forecasts$value)
odds_over_time<- ggplot(data=national_forecasts,aes(x=date,y=value,colour=candidate,group=candidate)) +
geom_line(size=2.3) +
#theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
ggtitle("Odds Over Time")+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=23))+
theme(legend.position = "bottom")+
scale_color_manual(values=c("deepskyblue", "firebrick1"))+
theme(axis.title.y=element_blank())+
theme(axis.title.x=element_blank())+
theme(legend.title=element_blank())+
scale_y_continuous(limits = c(0.0, 100.0))+
theme(panel.grid.minor = element_blank()
,panel.background = element_rect(fill = "white")
,panel.grid.major = element_line(colour = "gray93")
,axis.line.x = element_line(color="black")
,axis.line.y = element_blank()
)+
scale_x_date(limits=c(as.Date('2016-06-01'),as.Date('2016-11-08')))+
geom_vline(linetype=2,aes(xintercept=as.numeric(as.Date('2016-11-08'))))+
geom_vline(linetype=1,aes(xintercept=as.numeric(run_date)))+
geom_text(aes(x=as.Date('2016-11-08')-7.5, label="Election Day\nNov 8", y=100), colour="grey38",size=5)+
geom_text(aes(x=run_date-7.5, label=as.character(run_date), y=100), colour="grey38",size=5)+
theme(legend.text = element_text(size = 19, face = "bold"))+
guides(fill=guide_legend(title=NULL))+
theme(axis.text=element_text(size=18))+
theme(axis.title=element_text(size=22))+
geom_text(aes(x=run_date+6, label=paste0(round(100*dem_prob,1),'%'), y=round(100*dem_prob,1)), colour="grey38",size=7)+
geom_text(aes(x=run_date+6, label=paste0(100-round(100*dem_prob,1),'%'), y=100-round(100*dem_prob,1)), colour="grey38",size=7)+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=31))
#########################################################################################################################################
#NATIONAL FORECAST OVER TIME
#########################################################################################################################################
#########################################################################################################################################
# VISUALIZATION: STATE MARGINS
#########################################################################################################################################
state_odds_temp<-state_odds[is.na(state_odds$mean)==FALSE,]
state_odds_temp<-state_odds_temp[order(state_odds_temp$mean),]
#80% confidence intervals
ci_bands<-aes(ymax=mean+1.28*sd,ymin=mean-1.28*sd)
dodge <- position_dodge(width=0.9)
state_margins<-ggplot(data=state_odds_temp, aes(x=reorder(state, -mean), y=mean,fill=mean)) +
geom_bar(stat="identity") +
geom_crossbar(ci_bands, position=dodge, width=0.25,alpha=.5,colour='grey41',show.legend = TRUE)+
coord_flip() +
scale_fill_gradient2(
low = "red"
,high = "blue"
,mid = "grey"
,midpoint = 0) +
labs(title = "State Margins of Victory")+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=31))+
ylab("Margin of Victory")+
xlab(expression(paste(symbol('\254'),' ','Clinton','        ','Trump',' ', symbol('\256'))))+
scale_y_continuous(breaks = c(-30,-20,-10,0,10,20,30), labels = c("+30","+20","+10", "0","+10","+20","+30"))+
theme(axis.text=element_text(size=25))+
theme(axis.title=element_text(size=25))+
theme(legend.text = element_text(size = 19, face = "bold"))+
theme(legend.position = "none")+
theme(axis.title.y=element_text(face='bold'))+
theme(panel.grid.minor = element_blank()
,panel.background = element_rect(fill = "white")
,panel.grid.major = element_line(colour = "gray93")
)
#########################################################################################################################################
# VISUALIZATION: STATE MARGINS
#########################################################################################################################################
#########################################################################################################################################
# VISUALIZATION: HISTOGRAMS
#########################################################################################################################################
hist_data<-
data.frame(
rbind(
cbind(rep('Clinton',length(electoral_vote_list)),electoral_vote_list)
,cbind(rep('Trump',length(electoral_vote_list)),538-electoral_vote_list)
)
)
names(hist_data)<-c('candidate','electoral_votes')
hist_data$electoral_votes<-as.numeric(as.character(hist_data$electoral_votes))
sum_dat<-ddply(hist_data, "candidate", summarise, electoral_votes.mean=mean(electoral_votes))
if(sum_dat[sum_dat$candidate=='Clinton',2]>=270){
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]+12
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]-12
}else{
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]-12
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]+12
}
line_lengths<-sql("
select
hd.candidate
,count(case when electoral_votes>=round(`electoral_votes.mean`)-2 and electoral_votes<=round(`electoral_votes.mean`)+2 then hd.candidate end) as counter
from hist_data hd
inner join sum_dat sd on sd.candidate=hd.candidate
group by 1
")
simulated_result<-ggplot(hist_data, aes(x=electoral_votes, fill=candidate)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+
scale_fill_manual(values=c("deepskyblue", "firebrick1"))+
geom_text(aes(x=clinton_label_spot, label=round(sum_dat[sum_dat$candidate=='Clinton',2]), y=60), colour="blue",size=8)+
geom_text(aes(x=trump_label_spot, label=round(sum_dat[sum_dat$candidate=='Trump',2]), y=60), colour="red3",size=8)+
geom_text(aes(x=270, label='270 to Win', y=380),size=8)+
ggtitle("Electoral Votes")+
ylab("Simulations")+
xlab("Electoral Votes")+
guides(fill=guide_legend(title=NULL))+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=31))+
theme(axis.text=element_text(size=18))+
theme(axis.title=element_text(size=22))+
theme(legend.text = element_text(size = 19, face = "bold"))+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Clinton',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Clinton',2]), yend = line_lengths[line_lengths$candidate=='Clinton','counter']), colour = "blue",linetype='dashed',size=1)+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Trump',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Trump',2]), yend = line_lengths[line_lengths$candidate=='Trump','counter']), colour = "red3",linetype='dashed',size=1)+
geom_segment(aes(x = 270, y = 0, xend = 270, yend = 360),linetype='dashed',size=1)+
theme(legend.position = "bottom")+
theme(panel.grid.minor = element_blank()
,panel.background = element_rect(fill = "white")
,panel.grid.major = element_line(colour = "gray93")
,axis.line.x = element_line(color="black")
)
#########################################################################################################################################
# VISUALIZATION: HISTOGRAMS
#########################################################################################################################################
#########################################################################################################################################
# VISUALIZATION: CARTOGRAM
#########################################################################################################################################
dat <- data.frame(state=as.character(state_odds$abb), value=state_odds$mean, stringsAsFactors=FALSE)
dat[dat$value>=50,'value']<-dat[dat$value>=50,'value']/3
dat[dat$value<=-50,'value']<-dat[dat$value<=-50,'value']/2
map<-statebins(dat
,breaks=7
,labels=c("Solid R","Likely R","Lean R","Tossup","Lean D","Likely D","Solid D")
,brewer_pal="RdBu"
,text_color="black"
,font_size=6
,legend_title=""
,legend_position="bottom"
)
#########################################################################################################################################
# VISUALIZATION: CARTOGRAM
#########################################################################################################################################
#########################################################################################################################################
# VISUALIZATION: STATE GRAPHS
#########################################################################################################################################
temp<-sql("
select
paf.*
,msr.state as state_full
,case when prediction in ('prob_unweighted_dem','prob_weighted_dem') then 'Clinton' else 'Trump' end as candidate
from polls_altered_final paf
inner join master_state_ref msr on paf.state=msr.abb
where paf.election_year=2016
")
relevant_list<-sort(unique(temp$state_full))
relevant_list_abb<-unique(temp[order(temp$state_full),'state'])
temp$value<-100*as.numeric(temp$nearest_neighbor_value)
temp<-sql("
select
t.*
,case when value>99.9 then '>99.9'
when value<.1 then '<.1'
else cast(round(value,1) as text) end as poll_data_value_label
from temp t
")
plots<-vector('list', length(relevant_list))
for(i in 1:length(relevant_list)){
state<-relevant_list[i]
state_abbrev<-relevant_list_abb[i]
if(nchar(state)>10){state_label<-state_abbrev}else{state_label<-state}
temp_new<-temp[temp$state_full==state,]
poll_temp<-temp_new[temp_new$final_prediction_ind==1,]
plot<- ggplot(data=temp_new,aes(x=date,y=value,colour=candidate,group=candidate)) +
geom_line(size=1.2) +
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
ggtitle(
paste(state_label," - ",as.character(poll_temp[which.max(poll_temp$value),'candidate']),sub(" ", "",paste(poll_temp[which.max(poll_temp$value),'poll_data_value_label'],"%"),fixed=TRUE))
)+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=23))+
theme(legend.position = "none")+
scale_color_manual(values=c("deepskyblue", "firebrick1"))+
theme(axis.title.y=element_blank())+
theme(axis.title.x=element_blank())+
scale_y_continuous(limits = c(0, 100))+
theme(panel.grid.minor = element_blank()
,panel.background = element_rect(fill = "white")
,panel.grid.major = element_line(colour = "gray93")
,axis.line.x = element_line(color="black")
,axis.line.y = element_blank()
)
plots[[i]]<-plot
}
#multiplot(plotlist = plots,cols=3)
#########################################################################################################################################
# VISUALIZATION: STATE GRAPHS
#########################################################################################################################################
#########################################################################################################################################
# RESULTS
#########################################################################################################################################
#Biggest blowouts:
republican_blowout<-state_odds[state_odds$mean==min(state_odds$mean),'state']
republican_blowout_margin<-round(abs(state_odds[state_odds$mean==min(state_odds$mean),'mean']),0)
democratic_blowout<-state_odds[state_odds$mean==max(state_odds$mean),'state']
democratic_blowout_margin<-round(abs(state_odds[state_odds$mean==max(state_odds$mean),'mean']),0)
if(dem_prob>=.5){
winner<-'Hillary Clinton'
loser<-'Donald Trump'
winner_prob<-paste0(round(100*dem_prob,1),'%')
loser_prob<-paste0(100-round(100*dem_prob,1),'%')
winning_electoral_votes<-round(mean(electoral_vote_list),0)
losing_electoral_votes<-538-winning_electoral_votes
color<-'dodgerblue'
num_states_won<-nrow(state_odds[state_odds$mean>0,])
winner_pronoun<-"She"
loser_pronoun<-"He"
if(round(100*dem_prob,1)<90 && round(100*dem_prob,1)>=80){a_or_an<-'an'}else{ a_or_an<-'a'}
}else{
winner<-'Donald Trump'
loser<-'Hillary Clinton'
winner_prob<-paste0(100-round(100*dem_prob,1),'%')
loser_prob<-paste0(round(100*dem_prob,1),'%')
winning_electoral_votes<-538-round(mean(electoral_vote_list),0)
losing_electoral_votes<-round(mean(electoral_vote_list),0)
color<-'firebrick1'
num_states_won<-nrow(state_odds[state_odds$mean<0,])
winner_pronoun<-'He'
loser_pronoun<-'She'
if(100-round(100*dem_prob,1)<90 && 100-round(100*dem_prob,1)>=80 ){a_or_an<-'an'}else{ a_or_an<-'a'}
}
# par(bg = color)
# par(mar = c(0,0,0,0))
# plot(c(0, 1), c(0, 1), ann = F, bty = 'n', type = 'n', xaxt = 'n', yaxt = 'n')
# text(x = 0.5, y = 0.5, paste0(winner," has ",a_or_an," ",winner_prob," chance of being president"),
#      cex = 2, col = "white",font=2)
# text(x = 0.5, y = 0.45, paste0(winner_pronoun," will win ", num_states_won," states",plus_dc," winning the electoral college ",winning_electoral_votes,"-",losing_electoral_votes),
#      cex = 1.6, col = "grey88",font=2)
#########################################################################################################################################
# RESULTS
#########################################################################################################################################
#########################################################################################################################################
# HTML TABLE
#########################################################################################################################################
for(i in 1:nrow(state_odds)){
margin<-paste0(state_odds$abb[i],'_MARGIN')
assign(margin,paste0('+',abs(round(state_odds$mean[i],1))))
ev<-paste0(state_odds$abb[i],'_EV')
assign(ev,state_odds$electoral_votes[i])
if(state_odds$mean[i]<0){
odds_temp_temp<-100-state_odds$tested_odds[i]
}else{odds_temp_temp<-state_odds$tested_odds[i]}
if(odds_temp_temp==100){odds_temp<-'>99.9%'}
else if(odds_temp_temp==0){odds_temp<-'<0.1%'}
else{odds_temp<-paste0(odds_temp_temp,'%')}
probs<-paste0(state_odds$abb[i],'_ODDS')
assign(probs,odds_temp)
winners<-paste0(state_odds$abb[i],'_WINNER')
if(state_odds$mean[i]>=0){winner_temp<-'Clinton'}else{winner_temp<-'Trump'}
assign(winners,winner_temp)
}
#########################################################################################################################################
# HTML TABLE
#########################################################################################################################################
dem_prob
national_forecasts
dem_prob
odds_over_time
source('~/election_forecastsV2/main.R')
dem_prob
odds_over_time
source('~/election_forecastsV2/main.R')
dem_prob
print(paste("Creating Forecasts for RUN DATE:",run_date),quote=FALSE)
run_date+1
run_date+30
source('~/election_forecastsV2/main.R')
dem_prob
odds_over_time
run_date
national_forecasts
run_date
run_date+10
source('~/election_forecastsV2/main.R')
run_date
dem_prob
odds_over_time
map
run_date
dem_prob
run_date
source('~/election_forecastsV2/main.R')
dem_prob
odds_over_time
run_date
source('~/election_forecastsV2/main.R')
run_date
dem_prob
odds_over_time
run_date
run_date+10
run_date+1-
0
run_date+15
run_date+14
source('~/election_forecastsV2/main.R')
dem_prob
odds_over_time
run_date
odds_over_time
state_margins
map
odds_over_time
run_date
as.character(run_date)
winning_electoral_votes
odds_over_time
state_odds

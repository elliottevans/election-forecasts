hist_dem_prob+
weighted_running_average,data=temp[temp$actual!='',],family=binomial())
prob_weighted_dem<-predict(fit_weighted,temp,type='response')
prob_weighted_rep<-1-prob_weighted_dem
temp2<-data.frame(cbind(temp,prob_weighted_dem,prob_weighted_rep))
polls_altered_final<-temp2
polls_altered_final<-melt(polls_altered_final,id=c('id','election_year','state','date','days_till_election','dem_plus_minus',
'running_average','weighted_running_average','hist_dem_prob','actual','actual_dem_margin','actual_binary_dem'))
names(polls_altered_final)[ncol(polls_altered_final)-1]<-'prediction'
polls_altered_final<-sql("
select
paf.*
,case when prediction='prob_weighted_rep' then 1-probs
when prediction='prob_weighted_dem' then probs
end as nearest_neighbor_value
,((case when prediction='prob_weighted_rep' then 1-probs
when prediction='prob_weighted_dem' then probs
end) + paf.value)/2 as blended_prob
from polls_altered_final paf
left join polls_altered_2016 pa on pa.id=paf.id
")
####################################
# Actually create the models
####################################
####################################
# Set indicators for the state's most current prediction date
####################################
#Make indicators for the last prediction for each state-year
temp<-sql("
select
election_year
,State
,min(days_till_election) as final_poll_days_till_election
from polls_altered_final
group by 1,2
")
polls_altered_final<-sql("
select
paf.*
,case when final_poll_days_till_election=days_till_election then 1 else 0 end as final_prediction_ind
from polls_altered_final paf
inner join temp t on paf.election_year=t.election_year and paf.State=t.State
")
write.csv(polls_altered_final,'forecasts\\polls_altered_final.csv',row.names = FALSE)
####################################
# Set indicators for the state's most current prediction date
####################################
############################################################################
#Create the logistic models
############################################################################
############################################################################
# Data Visualization
############################################################################
############################
# State Graphs
############################
temp<-sql("
select
paf.*
,msr.state as state_full
,candidate as candidate
from polls_altered_final paf
inner join polls p on paf.election_year=p.election_year
and p.State=paf.State
and (case when prediction in ('prob_unweighted_dem','prob_weighted_dem') then 'D'
when prediction in ('prob_unweighted_rep','prob_weighted_rep') then 'R'
end) = p.party
and p.id=paf.id
inner join master_state_ref msr on paf.state=msr.abb
where paf.election_year=2016
")
relevant_list<-sort(unique(temp$state_full))
relevant_list_abb<-unique(temp[order(temp$state_full),'state'])
#HERE TO EDIT
#temp$value<-100*as.numeric(temp$value)
#temp$value<-100*as.numeric(temp$blended_prob)
temp$value<-100*as.numeric(temp$nearest_neighbor_value)
temp<-sql("
select
t.*
,case when value>99 then '>99'
when value<1 then '<1'
else cast(round(value,1) as text) end as poll_data_value_label
from temp t
")
plots<-vector('list', length(relevant_list))
for(i in 1:length(relevant_list)){
state<-relevant_list[i]
state_abbrev<-relevant_list_abb[i]
if(nchar(state)>10){state_label<-state_abbrev}else{state_label<-state}
temp_new<-temp[temp$state_full==state,]
poll_temp<-temp_new[temp_new$final_prediction_ind==1,]
plot<- ggplot(data=temp_new,aes(x=date,y=value,colour=candidate,group=candidate)) +
geom_line(size=1.5) +
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
ggtitle(
paste(state_label," - ",as.character(poll_temp[which.max(poll_temp$value),'candidate']),sub(" ", "",paste(poll_temp[which.max(poll_temp$value),'poll_data_value_label'],"%"),fixed=TRUE))
)+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=19))+
theme(legend.position = "none")+
scale_color_manual(values=c("deepskyblue", "firebrick1"))+
theme(axis.title.y=element_blank())+
theme(axis.title.x=element_blank())
plots[[i]]<-plot
}
############################
# State Graphs
############################
############################
# Map
############################
############################
# Map
############################
############################################################################
# Data Visualization
############################################################################
############################################################################
# Election Simulation
############################################################################
#HERE TO EDIT
temp<-sqldf("
select
msr.state
,abb
,electoral_votes
,ifnull(dem_prob,msr.hist_dem_prob) as dem_prob
from master_state_ref msr
left join
(
select
state
,hist_dem_prob
,nearest_neighbor_value as dem_prob
from polls_altered_final paf
where final_prediction_ind=1
and election_year=2016
and prediction='prob_weighted_dem'
) as t1
on msr.abb=t1.state
")
n<-10000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
electoral_votes<-0
for(j in 1:nrow(temp)){
win_or_lose<-rbinom(1,1,temp[j,'dem_prob'])
if(win_or_lose==1){
electoral_votes<-electoral_votes+temp[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
############################################################################
# Election Simulation
############################################################################
hist_data<-
data.frame(
rbind(
cbind(rep('Clinton',length(electoral_vote_list)),electoral_vote_list)
,cbind(rep('Trump',length(electoral_vote_list)),538-electoral_vote_list)
)
)
names(hist_data)<-c('candidate','electoral_votes')
hist_data$electoral_votes<-as.numeric(as.character(hist_data$electoral_votes))
sum_dat<-ddply(hist_data, "candidate", summarise, electoral_votes.mean=mean(electoral_votes))
if(sum_dat[sum_dat$candidate=='Clinton',2]>=270){
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]+9
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]-9
}else{
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]-9
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]+9
}
line_lengths<-sql("
select
hd.candidate
,count(case when electoral_votes>=round(`electoral_votes.mean`)-2 and electoral_votes<=round(`electoral_votes.mean`)+2 then hd.candidate end) as counter
from hist_data hd
inner join sum_dat sd on sd.candidate=hd.candidate
group by 1
")
simulated_result<-ggplot(hist_data, aes(x=electoral_votes, fill=candidate)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+
scale_fill_manual(values=c("deepskyblue", "firebrick1"))+
geom_text(aes(x=clinton_label_spot, label=round(sum_dat[sum_dat$candidate=='Clinton',2]), y=60), colour="blue",size=8)+
geom_text(aes(x=trump_label_spot, label=round(sum_dat[sum_dat$candidate=='Trump',2]), y=60), colour="red3",size=8)+
geom_text(aes(x=270, label='270 to Win', y=1000),size=8)+
ggtitle("Electoral Votes")+
ylab("Frequency")+
xlab("Electoral Votes")+
guides(fill=guide_legend(title=NULL))+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=31))+
theme(axis.text=element_text(size=18))+
theme(axis.title=element_text(size=22))+
theme(legend.text = element_text(size = 19, face = "bold"))+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Clinton',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Clinton',2]), yend = line_lengths[line_lengths$candidate=='Clinton','counter']), colour = "blue",linetype='dashed',size=1)+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Trump',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Trump',2]), yend = line_lengths[line_lengths$candidate=='Trump','counter']), colour = "red3",linetype='dashed',size=1)+
geom_segment(aes(x = 270, y = 0, xend = 270, yend = 960),linetype='dashed',size=1)
temp
dem_prob
n<-10000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
electoral_votes<-0
for(j in 1:nrow(temp)){
win_or_lose<-rbinom(1,1,temp[j,'dem_prob'])
if(win_or_lose==1){
electoral_votes<-electoral_votes+temp[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
dem_prob
simulated_result
k_run<-500
temp<-polls_altered
temp$days_till_election<-temp$days_till_election-mean(temp$days_till_election)
temp$days_till_election<-temp$days_till_election/sd(temp$days_till_election)
temp$weighted_running_average<-temp$weighted_running_average-mean(temp$weighted_running_average)
temp$weighted_running_average<-temp$weighted_running_average/sd(temp$weighted_running_average)
temp$hist_dem_prob<-temp$hist_dem_prob-mean(temp$hist_dem_prob)
temp$hist_dem_prob<-temp$hist_dem_prob/sd(temp$hist_dem_prob)
train<-temp[temp$actual!='',c("days_till_election","weighted_running_average","hist_dem_prob","actual_dem_margin")]
nearest<-get.knnx(
train[,c(
"days_till_election"
,"weighted_running_average"
#,"hist_dem_prob"
)]
,temp[temp$election_year==2016,c(
"days_till_election"
,"weighted_running_average"
#,"hist_dem_prob"
)]
,k=k_run)
indices<-nearest$nn.index
polls_altered_2016<-polls_altered[polls_altered$election_year==2016,]
means<-c()
sds<-c()
probs<-c()
for(i in 1:nrow(polls_altered_2016)){
means<-append(means,mean(train[indices[i,],]$actual_dem_margin))
sds<-append(sds,sd(train[indices[i,],]$actual_dem_margin))
probability<-pnorm(q=0,mean=means[i],sd=sds[i],lower.tail = FALSE)
#probability<-1-psnorm(q=0
#      ,(snormFit(train[indices[i,],]$actual_dem_margin))$par[1]
#      ,(snormFit(train[indices[i,],]$actual_dem_margin))$par[2]
#      ,(snormFit(train[indices[i,],]$actual_dem_margin))$par[3]
#      )
probs<-append(probs,probability)
}
polls_altered_2016$probs<-probs
########################
# NEAREST NEIGHBOR
########################
states<-unique(polls_altered$state)
temp<-polls_altered
#Fit the linear regression models to each state using weighted polling
fit_weighted<-glm(as.numeric(actual_binary_dem)~
days_till_election+
hist_dem_prob+
weighted_running_average,data=temp[temp$actual!='',],family=binomial())
prob_weighted_dem<-predict(fit_weighted,temp,type='response')
prob_weighted_rep<-1-prob_weighted_dem
temp2<-data.frame(cbind(temp,prob_weighted_dem,prob_weighted_rep))
polls_altered_final<-temp2
polls_altered_final<-melt(polls_altered_final,id=c('id','election_year','state','date','days_till_election','dem_plus_minus',
'running_average','weighted_running_average','hist_dem_prob','actual','actual_dem_margin','actual_binary_dem'))
names(polls_altered_final)[ncol(polls_altered_final)-1]<-'prediction'
polls_altered_final<-sql("
select
paf.*
,case when prediction='prob_weighted_rep' then 1-probs
when prediction='prob_weighted_dem' then probs
end as nearest_neighbor_value
,((case when prediction='prob_weighted_rep' then 1-probs
when prediction='prob_weighted_dem' then probs
end) + paf.value)/2 as blended_prob
from polls_altered_final paf
left join polls_altered_2016 pa on pa.id=paf.id
")
####################################
# Actually create the models
####################################
####################################
# Set indicators for the state's most current prediction date
####################################
#Make indicators for the last prediction for each state-year
temp<-sql("
select
election_year
,State
,min(days_till_election) as final_poll_days_till_election
from polls_altered_final
group by 1,2
")
polls_altered_final<-sql("
select
paf.*
,case when final_poll_days_till_election=days_till_election then 1 else 0 end as final_prediction_ind
from polls_altered_final paf
inner join temp t on paf.election_year=t.election_year and paf.State=t.State
")
write.csv(polls_altered_final,'forecasts\\polls_altered_final.csv',row.names = FALSE)
####################################
# Set indicators for the state's most current prediction date
####################################
############################################################################
#Create the logistic models
############################################################################
############################################################################
# Data Visualization
############################################################################
############################
# State Graphs
############################
temp<-sql("
select
paf.*
,msr.state as state_full
,candidate as candidate
from polls_altered_final paf
inner join polls p on paf.election_year=p.election_year
and p.State=paf.State
and (case when prediction in ('prob_unweighted_dem','prob_weighted_dem') then 'D'
when prediction in ('prob_unweighted_rep','prob_weighted_rep') then 'R'
end) = p.party
and p.id=paf.id
inner join master_state_ref msr on paf.state=msr.abb
where paf.election_year=2016
")
relevant_list<-sort(unique(temp$state_full))
relevant_list_abb<-unique(temp[order(temp$state_full),'state'])
#HERE TO EDIT
#temp$value<-100*as.numeric(temp$value)
#temp$value<-100*as.numeric(temp$blended_prob)
temp$value<-100*as.numeric(temp$nearest_neighbor_value)
temp<-sql("
select
t.*
,case when value>99 then '>99'
when value<1 then '<1'
else cast(round(value,1) as text) end as poll_data_value_label
from temp t
")
plots<-vector('list', length(relevant_list))
for(i in 1:length(relevant_list)){
state<-relevant_list[i]
state_abbrev<-relevant_list_abb[i]
if(nchar(state)>10){state_label<-state_abbrev}else{state_label<-state}
temp_new<-temp[temp$state_full==state,]
poll_temp<-temp_new[temp_new$final_prediction_ind==1,]
plot<- ggplot(data=temp_new,aes(x=date,y=value,colour=candidate,group=candidate)) +
geom_line(size=1.5) +
theme(axis.text.x=element_blank(),axis.ticks.x=element_blank())+
ggtitle(
paste(state_label," - ",as.character(poll_temp[which.max(poll_temp$value),'candidate']),sub(" ", "",paste(poll_temp[which.max(poll_temp$value),'poll_data_value_label'],"%"),fixed=TRUE))
)+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=19))+
theme(legend.position = "none")+
scale_color_manual(values=c("deepskyblue", "firebrick1"))+
theme(axis.title.y=element_blank())+
theme(axis.title.x=element_blank())
plots[[i]]<-plot
}
############################
# State Graphs
############################
############################
# Map
############################
############################
# Map
############################
############################################################################
# Data Visualization
############################################################################
############################################################################
# Election Simulation
############################################################################
#HERE TO EDIT
temp<-sqldf("
select
msr.state
,abb
,electoral_votes
,ifnull(dem_prob,msr.hist_dem_prob) as dem_prob
from master_state_ref msr
left join
(
select
state
,hist_dem_prob
,nearest_neighbor_value as dem_prob
from polls_altered_final paf
where final_prediction_ind=1
and election_year=2016
and prediction='prob_weighted_dem'
) as t1
on msr.abb=t1.state
")
n<-10000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
electoral_votes<-0
for(j in 1:nrow(temp)){
win_or_lose<-rbinom(1,1,temp[j,'dem_prob'])
if(win_or_lose==1){
electoral_votes<-electoral_votes+temp[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
############################################################################
# Election Simulation
############################################################################
hist_data<-
data.frame(
rbind(
cbind(rep('Clinton',length(electoral_vote_list)),electoral_vote_list)
,cbind(rep('Trump',length(electoral_vote_list)),538-electoral_vote_list)
)
)
names(hist_data)<-c('candidate','electoral_votes')
hist_data$electoral_votes<-as.numeric(as.character(hist_data$electoral_votes))
sum_dat<-ddply(hist_data, "candidate", summarise, electoral_votes.mean=mean(electoral_votes))
if(sum_dat[sum_dat$candidate=='Clinton',2]>=270){
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]+9
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]-9
}else{
clinton_label_spot<-sum_dat[sum_dat$candidate=='Clinton',2]-9
trump_label_spot<-sum_dat[sum_dat$candidate=='Trump',2]+9
}
line_lengths<-sql("
select
hd.candidate
,count(case when electoral_votes>=round(`electoral_votes.mean`)-2 and electoral_votes<=round(`electoral_votes.mean`)+2 then hd.candidate end) as counter
from hist_data hd
inner join sum_dat sd on sd.candidate=hd.candidate
group by 1
")
simulated_result<-ggplot(hist_data, aes(x=electoral_votes, fill=candidate)) +
geom_histogram(binwidth=5, alpha=.5, position="identity")+
scale_fill_manual(values=c("deepskyblue", "firebrick1"))+
geom_text(aes(x=clinton_label_spot, label=round(sum_dat[sum_dat$candidate=='Clinton',2]), y=60), colour="blue",size=8)+
geom_text(aes(x=trump_label_spot, label=round(sum_dat[sum_dat$candidate=='Trump',2]), y=60), colour="red3",size=8)+
geom_text(aes(x=270, label='270 to Win', y=1000),size=8)+
ggtitle("Electoral Votes")+
ylab("Frequency")+
xlab("Electoral Votes")+
guides(fill=guide_legend(title=NULL))+
theme(plot.title=element_text(face="bold",hjust=0,vjust=2,colour="#3C3C3C",size=31))+
theme(axis.text=element_text(size=18))+
theme(axis.title=element_text(size=22))+
theme(legend.text = element_text(size = 19, face = "bold"))+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Clinton',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Clinton',2]), yend = line_lengths[line_lengths$candidate=='Clinton','counter']), colour = "blue",linetype='dashed',size=1)+
geom_segment(aes(x = round(sum_dat[sum_dat$candidate=='Trump',2]), y = 0, xend = round(sum_dat[sum_dat$candidate=='Trump',2]), yend = line_lengths[line_lengths$candidate=='Trump','counter']), colour = "red3",linetype='dashed',size=1)+
geom_segment(aes(x = 270, y = 0, xend = 270, yend = 960),linetype='dashed',size=1)
temp
dem_prob
n<-15000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
electoral_votes<-0
for(j in 1:nrow(temp)){
win_or_lose<-rbinom(1,1,temp[j,'dem_prob'])
if(win_or_lose==1){
electoral_votes<-electoral_votes+temp[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
dem_prob
n<-20000
dem_wins<-0
electoral_vote_list<-c()
for(i in 1:n){
electoral_votes<-0
for(j in 1:nrow(temp)){
win_or_lose<-rbinom(1,1,temp[j,'dem_prob'])
if(win_or_lose==1){
electoral_votes<-electoral_votes+temp[j,'electoral_votes']
}
}
electoral_vote_list<-append(electoral_vote_list,electoral_votes)
if(electoral_votes>=270){
dem_wins<-dem_wins+1
}
}
dem_prob<-dem_wins/n
dem_prob
simulated_result
